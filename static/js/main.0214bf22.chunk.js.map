{"version":3,"sources":["logo.svg","components/Fact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Fact","fact","className","App","props","state","handleClick","bind","axios","get","then","response","setState","data","href","src","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,gJCc5BC,G,MAZF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKC,UAAU,iCACX,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAKA,W,iBC6D9BE,G,wDA7Db,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAQ,CAACJ,KAAK,IACnB,EAAKK,YAAc,EAAKA,YAAYC,KAAjB,gBAHrB,E,0DAMc,IAAD,OACXC,IAAMC,IAAI,sCAAsCC,MAAK,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAACX,KAAKU,EAASE,Y,+BAKhG,OACF,6BACI,yBAAKX,UAAU,UACf,wBAAIA,UAAU,cAAd,yBACJ,yBAAKA,UAAU,uCACX,uBAAGA,UAAU,eAAeY,KAAK,+CAAjC,IAAgF,yBAAKC,IAAI,eAAeb,UAAU,cAClH,uBAAGA,UAAU,eAAeY,KAAK,4CAA2C,yBAAKC,IAAI,aAAab,UAAU,cAIhH,yBAAKA,UAAU,QAEf,kBAAC,EAAD,CAAMD,KAAMe,KAAKX,MAAMJ,OAEvB,yBAAKC,UAAU,uCACT,4BAAQA,UAAU,mCAAmCe,QAASD,KAAKV,aAAnE,iCAIN,yBAAKJ,UAAU,8CACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,cAAd,WACA,uBAAGA,UAAU,aAAb,iOASJ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,2BAA2Ba,IAAI,oBAEhD,4BAAQb,UAAU,UAChB,yBAAKA,UAAU,6CAA4C,kE,GAjD3CgB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0214bf22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst Fact = ({ fact }) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n        <div className=\"card fact\">\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{fact.fact}</h5>\r\n          </div>\r\n        </div>\r\n      \r\n    </div>\r\n  )\r\n};\r\nexport default Fact","import React from 'react';\nimport logo from './logo.svg';\nimport Fact from './components/Fact'\nimport axios from 'axios'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props)\n  {\n    super(props)\n    this.state = {fact:[]}\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(){\n    axios.get('https://factdogs.herokuapp.com/get').then(response => this.setState({fact:response.data}))\n}\n\n\nrender() {\n  return(\n<div>\n    <div className=\"header\">\n    <h1 className=\" titleName\">Interesting Dog facts</h1>\n<div className=\"header_pictures form-inline ml-auto\">\n    <a className=\" form-inline\" href=\"https://www.linkedin.com/in/julius-talacka/\"> <img src=\"linkedin.png\" className=\"linkedin\"/></a>\n    <a className=\" form-inline\" href=\"https://github.com/jtalacka/dog-fact-web\"><img src=\"github.png\" className=\"github\"/></a>\n    </div>\n\n</div>\n<div className=\"Card\">\n\n<Fact fact={this.state.fact}/>\n\n<div className=\"d-flex justify-content-center mb-20\">\n      <button className=\"btn btn-default btn-lg btn-block\" onClick={this.handleClick}>Get a random fact about dogs</button>\n</div>\n\n\n<div className=\"d-flex justify-content-center description \">\n  <div className=\"card\">\n    <h5 className=\"card-title\">Welcome</h5>\n    <p className=\"card-text\">Hello and welcome to this simple page. Here by clicking a simple button a random fact about dogs will be shown to you. I hope, that even more animal lovers would check what they don't know about these mans best friends</p>\n    </div>\n</div>\n\n\n\n</div>\n\n\n<div className=\"backgroundPicture\">\n  <img className=\"backgroundPicturePicture\" src=\"background.png\"></img>\n</div>\n<footer className=\"footer\">\n  <div className=\"footer-text d-flex justify-content-center\"><h2>\n    Made by Julius Talaƒçka\n  </h2>\n  </div>\n\n</footer>\n\n    </div>\n  )\n}\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}